<?xml version="1.0"?>
<package xmlns="http://pear.php.net/dtd/package-2.0" xmlns:tasks="http://pear.php.net/dtd/tasks-1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.0" xsi:schemaLocation="http://pear.php.net/dtd/tasks-1.0 http://pear.php.net/dtd/tasks-1.0.xsd http://pear.php.net/dtd/package-2.0 http://pear.php.net/dtd/package-2.0.xsd">
  <name>event</name>
  <channel>pecl.php.net</channel>
  <summary>Provides interface to libevent library</summary>
  <description>
  This is an extension to efficiently schedule I/O, time and signal based
  events using the best I/O notification mechanism available for specific platform.
  This is a port of libevent to the PHP infrastructure.

  Version 1.0.0 introduces:
  * new OO API breaking backwards compatibility
  * support of libevent 2+ including HTTP, DNS, OpenSSL and the event listener.

  Note, event-1.0.0 and greater is not compatible with previous versions.
  </description>
  <lead>
    <name>Ruslan Osmanov</name>
    <user>osmanov</user>
    <email>osmanov@php.net</email>
    <active>yes</active>
  </lead>
  <developer>
    <name>Anatol Belski</name>
    <user>ab</user>
    <email>ab@php.net</email>
    <active>yes</active>
  </developer>
  <contributor>
    <name>Remi Collet</name>
    <user>remi</user>
    <email>remi@php.net</email>
    <active>yes</active>
  </contributor>
  <date>2014-06-20</date>
  <!--{{{ Current version -->
  <version>
    <release>1.10.2</release>
    <api>1.9.0</api>
  </version>
  <stability>
    <release>stable</release>
    <api>stable</api>
  </stability>
  <license uri="http://www.php.net/license">PHP</license>
  <notes><![CDATA[
    Fix: EventBufferEvent::read() accepted negative values
    Fix: TSRM context was not set in EventHttp::__construct (J치nos Fekete)
    Fix: refcounter in EventHttp's default callback (J치nos Fekete)
  ]]></notes>
  <!--}}}-->
  <!--{{{ Contents -->
  <contents>
    <dir name="/">
      <file role="doc" name="CREDITS"/>
      <file role="doc" name="INSTALL.md"/>
      <file role="doc" name="LICENSE"/>
      <file role="doc" name="README.md"/>
      <file role="src" name="config.m4"/>
      <file role="src" name="config.w32"/>
      <file role="src" name="php_event.c"/>
      <file role="src" name="php_event.h"/>
      <dir name="classes">
        <file role="src" name="base.c"/>
        <file role="src" name="buffer.c"/>
        <file role="src" name="buffer_event.c"/>
        <file role="src" name="dns.c"/>
        <file role="src" name="event.c"/>
        <file role="src" name="event_config.c"/>
        <file role="src" name="event_util.c"/>
        <file role="src" name="http.c"/>
        <file role="src" name="http.h"/>
        <file role="src" name="http_connection.c"/>
        <file role="src" name="http_request.c"/>
        <file role="src" name="listener.c"/>
        <file role="src" name="ssl_context.h"/>
        <file role="src" name="ssl_context.c"/>
      </dir>
      <dir name="examples">
        <file role="doc" name="buffer_proxy.php"/>
        <dir name="ssl-echo-server">
          <file role="doc" name="server.php"/>
          <file role="doc" name="client.php"/>
        </dir>
        <file role="doc" name="eio.php"/>
        <file role="doc" name="fibonacci_buffer.php"/>
        <file role="doc" name="http.php"/>
        <file role="doc" name="http_accept.php"/>
        <file role="doc" name="http_alias.php"/>
        <file role="doc" name="http_bind.php"/>
        <file role="doc" name="http_closecb.php"/>
        <file role="doc" name="http_request.php"/>
        <file role="doc" name="httpv0client.php"/>
        <file role="doc" name="httpv0client2.php"/>
        <file role="doc" name="https.php"/>
        <file role="doc" name="listener.php"/>
        <file role="doc" name="misc.php"/>
        <file role="doc" name="signal.php"/>
        <file role="doc" name="sslfilter.php"/>
        <file role="doc" name="ssl-connection.php"/>
        <file role="doc" name="timer.php"/>
        <file role="doc" name="uppercase_proxy.php"/>
      </dir>
      <dir name="src">
        <file role="src" name="common.h"/>
        <file role="src" name="fe.c"/>
        <file role="src" name="fe.h"/>
        <file role="src" name="pe.c"/>
        <file role="src" name="priv.h"/>
        <file role="src" name="structs.h"/>
        <file role="src" name="util.c"/>
        <file role="src" name="util.h"/>
      </dir>
      <dir name="tests">
        <file role="test" name="01-load.phpt"/>
        <file role="test" name="02-features.phpt"/>
        <file role="test" name="03-event-del.phpt"/>
        <file role="test" name="04-bevent-socket.phpt"/>
        <file role="test" name="05-buffer-pos.phpt"/>
        <file role="test" name="06-timer.phpt"/>
        <file role="test" name="07-listener-error.phpt"/>
        <file role="test" name="07-listener-error-win32.phpt"/>
        <file role="test" name="08-buffer.phpt"/>
        <file role="test" name="09-gc-cycles.phpt"/>
        <file role="test" name="10-event-data-dtor.phpt"/>
        <file role="test" name="11-gc-cycles.phpt"/>
        <file role="test" name="12-serialization.phpt"/>
        <file role="test" name="13-bevent-pair.phpt"/>
        <file role="test" name="14-httpconn-error.phpt"/>
        <file role="test" name="15-dnsbase-error.phpt"/>
        <file role="test" name="16-http-error.phpt"/>
        <file role="test" name="17-event-settimer-error.phpt"/>
        <file role="test" name="18-timer-error.phpt"/>
        <file role="test" name="19-event-signal-error.phpt"/>
        <file role="test" name="20-bevent-error.phpt"/>
        <file role="test" name="21-bevent-sslfilter-error.phpt"/>
        <file role="test" name="21-bevent-sslsocket-error.phpt"/>
      </dir>
    </dir>
  </contents>
  <!--}}}-->
  <dependencies>
    <required>
      <php>
        <min>5.4.0</min>
      </php>
      <pearinstaller>
        <min>1.4.0a1</min>
      </pearinstaller>
      <package>
        <name>libevent</name>
        <channel>pecl.php.net</channel>
        <min>0.0.2</min>
        <conflicts/>
        <providesextension>libevent</providesextension>
      </package>
      <extension>
        <name>libevent</name>
        <conflicts/>
      </extension>
    </required>
  </dependencies>
  <providesextension>event</providesextension>
  <extsrcrelease>
    <configureoption default="no" name="enable-event-debug" prompt="Enable internal debugging in Event"/>
    <configureoption default="yes" name="enable-event-sockets" prompt="Enable sockets support in Event"/>
    <configureoption default="/usr" name="with-event-libevent-dir" prompt="libevent installation prefix"/>
    <configureoption default="no" name="with-event-pthreads" prompt="Include libevent's pthreads library and enable thread safety support in Event"/>
    <configureoption default="yes" name="with-event-extra" prompt="Include libevent protocol-specific functionality support including HTTP, DNS, and RPC"/>
    <configureoption default="yes" name="with-event-openssl" prompt="Include libevent OpenSSL support"/>
    <configureoption default="no" name="with-openssl-dir" prompt="openssl installation prefix"/>
  </extsrcrelease>
  <!--{{{ changelog-->
  <changelog>
    <!--{{{ 1.10.2 -->
    <release>
      <version>
        <release>1.10.2</release>
        <api>1.9.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
    Fix: EventBufferEvent::read() accepted negative values
    Fix: TSRM context was not set in EventHttp::__construct (J치nos Fekete)
    Fix: refcounter in EventHttp's default callback (J치nos Fekete)
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.10.1 -->
    <release>
      <version>
        <release>1.10.1</release>
        <api>1.9.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
    Deleted a troublesome phpt test
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.10.0 -->
    <release>
      <version>
        <release>1.10.0</release>
        <api>1.9.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
        Issue #3: Segmentation fault on EventHttpRequest->free() (Bitbucket's tracker).
        Add: EventHttpConnection::__construct() now optionally accepts EventSslContext argument (Issue #5).
        Add: EventHttp::__construct() now accepts EventSslContext object as argument.
        ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.9.1 -->
    <release>
      <version>
        <release>1.9.1</release>
        <api>1.8.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
    Fix: return value of EventBase::reInit() was inverted
    issue #7: PHP_EVENT_REQUIRE_BASE_BY_REF() didn't work in 5.6.0-dev (fixed by Remi Collet)
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.9.0 -->
    <release>
      <version>
        <release>1.9.0</release>
        <api>1.8.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
  Windows support introduced(thanks to Anatol Belski <ab@php.net>)

  LIBEVENT_VERSION is now reported in phpinfo(Remi <remi@php.net>)

   Forced passing EventBase argument by reference. A method accepting EventBase
   will generate fatal error in case if corresponding argument is not passed by
   reference.

   EventBufferEvent::createPair method made static.
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.8.1 -->
    <release>
      <version>
        <release>1.8.1</release>
        <api>1.8.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
  Fix: Bug #65847 Issue with old libevent2 where evhttp_connection_get_bufferevent function was not available with libevent version < 2.0.17 (thanks to Remi <remi@php.net>)
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.8.0 -->
    <release>
      <version>
        <release>1.8.0</release>
        <api>1.8.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
  Add: EventHttpRequest methods: getBufferEvent, getConnection, closeConnection(thanks to rickysu at Bitbucket)
  Add: EventHttpConnection::setCloseCallback method
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.7.8 -->
    <release>
      <version>
        <release>1.7.8</release>
        <api>1.7.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
  Fix: build error on Solaris
  Introduced negative dependencies: libevent extension, windows OS
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.7.7 -->
    <release>
      <version>
        <release>1.7.7</release>
        <api>1.7.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
  Fix: incorrect handling of sockets extension dependency
  (a hack for distros installing sockets separately)
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.7.6 -->
    <release>
      <version>
        <release>1.7.6</release>
        <api>1.7.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
  Change: sockets extension is now required(see bug #65597). The user can still
  turn off this requirement off explicitly with --disable-event-sockets configure
  option
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.7.5 -->
    <release>
      <version>
        <release>1.7.5</release>
        <api>1.7.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
  Fix: build error with custom libevent installation prefixes like /lib(John Wamer)
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.7.4 -->
    <release>
      <version>
        <release>1.7.4</release>
        <api>1.7.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
  Fix: Segmentation fault caused by direct access to the zend object properties' hash table
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.7.3 -->
    <release>
      <version>
        <release>1.7.3</release>
        <api>1.7.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
  Fix: in php_event.c write_property function was non-static
  Fix: absence of get_gc property handler caused segfaults with gc_collect_cycles()
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.7.2 -->
    <release>
      <version>
        <release>1.7.2</release>
        <api>1.7.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
  Fix: bug #65320 where we got build errors in attempts to compile event statically(thanks to florin)
  Fix: bug #65319 where config.m4 used <php_version.h> to detect current PHP version
  Fix: config.m4 included -levent_pthreads into LDFLAGS even --without-event-pthreads configuration
  Fix: evthread_use_pthreads() call skept due to a "macro magic"(PHP_EVENT_ASSERT)
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.7.1 -->
    <release>
      <version>
        <release>1.7.1</release>
        <api>1.7.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
  Fix: segmentation fault on gc_collect_cycles() after calling Event::free(), 5lava @ Bitbucket reported
  Fix: assignment reference to "data" property caused 'Fatal error:  Cannot assign by reference to overloaded object'
  Fix: evnt object dtors sometimes didn't free the 'data' member until the script shutdown phase
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.7.0 -->
    <release>
      <version>
        <release>1.7.0</release>
        <api>1.7.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
    Merged in 5lava/pecl-event (pull request #1) @bitbucket:
    Fix: EventBufferEvent::setTimeouts() didn't work with double values
    Fix: EventBuffer::copyout() didn't work in some cases
    Add: EventBuffer::readFrom() method (corresponds to evbuffer_read())
    Add: EventUtil::getSocketFD() method
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.6.2  -->
    <release>
      <version>
        <release>1.6.2</release>
        <api>1.6.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
  Fix: bug #64678 where Fedora Packaging Guidlines required LICENSE file
  Fix: bug #64680 where we should check for SKIP_ONLINE_TESTS environment variable
  Fix: bug #64679 where we had buffer overflow caused by struct sockaddr_storage * pointer
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.6.1 -->
    <release>
      <version>
        <release>1.6.1</release>
        <api>1.6.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
  Fix: bug #64652 where Event::__construct returned valid object, however, with
  uninitialized internal struct which caused segmentation faults in further
  method calls
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.6.0 -->
    <release>
      <version>
        <release>1.6.0</release>
        <api>1.6.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
  Fix: bug #64551 with build failed on Mac OS X
  Fix: address argument of the listener accept callback contained garbage in case of a client connected via UNIX domain socket
  Add: EventBuffer::write, EventUtil::setSocketOption methods and some constants
  Refact: automatically set the upper bound of EventBuffer::search to the buffer length, if it is greater then the length
  Fix: make the code compatible with PHP 5.5.0 .. 5.6.0-dev
  Fix: build error with zts PHP setup
  Fix: build error with libevent_extra disabled
  Add: EventListener fd readonly property for numeric file descriptor of the socket associated with the listener
  Add: EventBuffer::substr method

  INCOMPATIBLE CHANGES!
  Renamed EventBuffer::remove to EventBuffer::read, EventBuffer::read now takes only max_bytes argument and returns string.
  Renamed EventBuffer::removeBuffer to EventBuffer::appendFrom
  EventBuffer::read now takes single argument 'size' and returns the string read
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.5.1 -->
    <release>
      <version>
        <release>1.5.1</release>
        <api>1.5.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
      Fix: EventBuffer::removeBuffer returned boolean instead of the number of bytes read
      Add: EventBuffer::fd property
      Change: EventBuffer class is not final any more
      ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.5.0 -->
    <release>
      <version>
        <release>1.5.0</release>
        <api>1.5.0</api>
      </version>
      <stability>
        <release>stable</release>
        <api>stable</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
        Fix: uninitialized socket caused segmentation fault in EventBufferEvent methods
        Del: EventBufferPosition class removed, EventBuffer::search now accepts and returns integers
        Add: EventBuffer::searchEol method
        Add: EventUtil::getSocketName method
        Add: EventListener::getSocketName method
        Fix: memory leak due to lack of zend_hash_destroy on the ssl context options
        Add: support of UNIX domain sockets in EventListener::__construct, EventBufferEvent::connect methods
        ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.4.0-beta  -->
    <release>
      <version>
        <release>1.4.0</release>
        <api>1.4.0</api>
      </version>
      <stability>
        <release>beta</release>
        <api>beta</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
Add: HTTP server support:
  * EventHttp methods: setMaxBodySize, setMaxHeadersSize, setTimeout,
    addServerAlias, removeServerAlias setCallback, setDefaultCallback,
    setAllowedMethods, setMaxBodySize, setMaxHeadersSize, setTimeout,
    addServerAlias, removeServerAlias;
  * EventHttpRequest class, callback and custom data can be bound to the
    request for future use with EventHttpConnection
  * New EventHttpConnection::makeRequest method allows to make custom HTTP
    requests by means of EventHttpRequest class
Change: make EventDnsBase parameter optional in EventHttpConnection::__construct
Fix: classes/buffer_event.c: possible memory access violation in bufferevent callback
Fix: turn off buggy libevent thread lock debugging when built with --enable-event-debug
]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.3.0-beta-->
    <release>
      <version>
        <release>1.3.0</release>
        <api>1.3.1</api>
      </version>
      <stability>
        <release>beta</release>
        <api>beta</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
Fix: possible memory access violations in EventBufferEvent input/output property handlers
Change: Event::$timer_pending property removed; generic Event::$pending property added
Fix: With OPT_LEAVE_SOCKETS_BLOCKING flag EventListener::__construct turned fd to non-blocking mode
Fix: property and class HashTable's were not free'd in MSHUTDOWN
Add: Event::$data property
Fix: Event::__construct failed with Event::TIMEOUT flag
Fix: memory leak in EventBuffer::readLine
Add: --with-event-pthreads configure option
Fix: EventBase::reInit method's arginfo
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.2.6-beta -->
    <release>
      <version>
        <release>1.2.6</release>
        <api>1.3.0</api>
      </version>
      <stability>
        <release>beta</release>
        <api>beta</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
      Fix: with OpenSSL turned off got error: undefined symbol: zim_EventUtil_sslRandPoll
      Add: implemented get_properties property handler(is called when one casts an object to array)
      Refact: removed memory alloc for empty property hashtables
      Fix: heap corruption caused by EventBufferEvent callbacks(thanks to Marco Schuster)
      Fix: continuous calls to EventBufferEvent::setCallbacks didn't free old fci/fcc(thanks to Marco Schuster)
      Fix: possible heap corruption in EventListener's callback
      Add: EventBase::resume method
      ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.2.5-alpha -->
    <version>
      <release>1.2.5</release>
      <api>1.2.1</api>
    </version>
    <stability>
      <release>alpha</release>
      <api>alpha</api>
    </stability>
    <license uri="http://www.php.net/license">PHP</license>
    <notes><![CDATA[
  Fix: unneeded Z_ADDREF_P() calls in EventListener, EventBufferEvent constructors and factory methods
  Fix: EventListener cached file descriptor for all connections
  Change: EventBufferEvent enable/disable methods return bool now
  Change: instead of stream pass numeric file descriptor to EventListener's accept-connection callback
  Add: callbacks and the callback arg are now passed to EventBufferEvent::__construct as optional arguments
  ]]></notes>
    <!--}}}-->
    <!--{{{ 1.2.4-alpha -->
    <version>
      <release>1.2.4</release>
      <api>1.2.1</api>
    </version>
    <stability>
      <release>alpha</release>
      <api>alpha</api>
    </stability>
    <license uri="http://www.php.net/license">PHP</license>
    <notes><![CDATA[
  Fix: deleted redundant len argument of EventBuffer::readLine
  Fix: EventBuffer::readLine returned non-dup'd string. Caused bugs with pointers.
  ]]></notes>
    <!--}}}-->
    <!--{{{ 1.2.3-alpha -->
    <release>
      <version>
        <release>1.2.3</release>
        <api>1.2.0</api>
      </version>
      <stability>
        <release>alpha</release>
        <api>alpha</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
  Fix: build errors
  Fix: undefined symbol SSLv2_*_method when SL_OP_NO_SSLv2 defined
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.2.0-alpha-->
    <release>
      <version>
        <release>1.2.0</release>
        <api>1.2.0</api>
      </version>
      <stability>
        <release>alpha</release>
        <api>alpha</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
  Fix: non-static zend_always_inline function failed to compile with some (non-zts) php setups
  Change: static EventBuffer::addBuffer made non-static with one argument
  Add: EventBuffer expand, prepend, prependBuffer, drain, copyout, readLine, search,
  setPosition methods
  Add: EventBufferPosition class
  Fix: configure error in FreeBSD
  Add: OpenSSL support: EventBufferEvent methods: sslFilter, sslSocket, sslError, sslRenegotiate; EventSslContext class
  Add: EventBuffer::pullup method
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.1.1-devel -->
    <release>
      <version>
        <release>1.1.1</release>
        <api>1.1.0</api>
      </version>
      <stability>
        <release>devel</release>
        <api>devel</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
  Fix: the installer failed to determine location of src/common.h
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.1.0-devel -->
    <release>
      <version>
        <release>1.1.0</release>
        <api>1.1.0</api>
      </version>
      <stability>
        <release>devel</release>
        <api>devel</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
  Procedural API converted to OOP API
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.0.1-devel -->
    <release>
      <version>
        <release>1.0.1</release>
        <api>1.0.0</api>
      </version>
      <stability>
        <release>devel</release>
        <api>devel</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
    Fix: crash due to destruction of the internal bufferevent buffers (synced with oop branch)
    Fix: extra memory consumption caused by continuous calls to bufferevent_get_input/_output
    Fix: memory violation while parsing event_config_set_max_dispatch_interval parameters
  ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ 1.0.0-devel -->
    <release>
      <date>2013-01-19</date>
      <version>
        <release>1.0.0</release>
        <api>1.0.0</api>
      </version>
      <stability>
        <release>devel</release>
        <api>devel</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
      Libevent 2+ support added
        ]]></notes>
    </release>
    <!--}}}-->
    <!--{{{ Obsolete releases-->
    <release>
      <date>2004-12-16</date>
      <lead>
        <name>Wez Furlong</name>
        <user>wez</user>
        <email>wez@php.net</email>
        <active>yes</active>
      </lead>
      <version>
        <release>0.9.1</release>
        <api>0.9.1</api>
      </version>
      <stability>
        <release>beta</release>
        <api>beta</api>
      </stability>
      <license uri="http://www.php.net/license">PHP</license>
      <notes><![CDATA[
      Added event_timeout() function for easily scheduling a callback after a certain
      period of time.  The timeout may be persistent to make the callback a recurrent
      event.

      Fixed an issue with timercmp() on windows that caused a busy wait when the
      scheduler could have performed a sleep.

      Windows scheduling engine now also processes the message queue while
      waiting; useful for COM/GUI based scripts.

      Fixed build for threaded systems with real signals.

      Supports epoll(4), poll(2) and select(2) IO notification engines.
      Support for /dev/poll and kqueue is pending.

      On Windows, currently only sockets can participate in the IO notification engine.
      ]]></notes>
      <deps>
        <dep type="php" rel="ge" version="4.3.0"/>
      </deps>
    </release>
    <!--}}}-->
  </changelog>
  <!--}}}-->
</package>
<!-- vim: set et sts=2 ts=2 sw=2 fdm=marker: -->
